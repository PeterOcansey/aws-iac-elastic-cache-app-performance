AWSTemplateFormatVersion: 2010-09-09
Description: Peter Ocansey | A Cloud Guru Challenge (Improve application performance using Amazon ElastiCache) - This template deploys the python app server using Infrastracture As Code


Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String
  
  AMItoUse:
    Description: AMI to use for our base image
    Type: String

  KeyToUse:
    Description: Key to use to connect to our instance
    Type: String
  
  DBName:
    Default: mydb
    Description: My database
    Type: String

  DBUsername:
    NoEcho: 'true'
    Description: Username for PostgreSQL database access
    Type: String

  DBPassword:
    NoEcho: 'true'
    Description: Password PostgreSQL database access
    Type: String


Resources:
  
  ServerInstance: 
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub 
          - |
            #!/bin/bash
            apt-get -y update
            apt-get -y install nginx

            rm /etc/nginx/sites-available/default

            block="/etc/nginx/sites-available/default"
            tee $block > /dev/null <<EOF
                server {
                        listen 80 default_server;
                        listen [::]:80 default_server;

                        root /var/www/html;
                        index index.html index.htm;

                        server_name _;

                        location / {
                                #try_files $uri $uri/ =404;
                                proxy_pass         http://127.0.0.1:5000/;
                                proxy_redirect     off;
                                proxy_set_header   Host \$host;
                                proxy_set_header   X-Real-IP  \$remote_addr;
                                proxy_set_header   X-Forwarded-For  \$proxy_add_x_forwarded_for;
                                proxy_set_header   X-Forwarded-Proto  \$scheme;
                        }
                }
            EOF

            ln -s $block /etc/nginx/sites-enabled/
            nginx -t && service nginx reload
            apt-get install -y python3
            apt-get install -y python-configparser
            apt install -y python3-virtualenv
            apt-get install -y postgresql-client-12
            apt-get install -y git
            cd /home/ubuntu
            su ubuntu -c "git clone https://github.com/ACloudGuru/elastic-cache-challenge.git"
            
            sudo rm elastic-cache-challenge/config/database.ini
            dblock="elastic-cache-challenge/config/database.ini"
            tee $dblock > /dev/null <<EOF
              [postgresql]
              host=${DBEndpoint}
              database=${DBName}
              user=${DBUsername}
              password=${DBPassword}
            EOF
            cd /home/ubuntu
            export PGPASSWORD=${DBPassword}
            psql -h ${DBEndpoint} -U ${DBUsername} -f /home/ubuntu/elastic-cache-challenge/install.sql ${DBName}
            cd /home/ubuntu/elastic-cache-challenge
            virtualenv --python=/usr/bin/python3 venvs/redischallenge
            source venvs/redischallenge/bin/activate
            pip install redis
            pip install flask
            pip install psycopg2-binary
            python3 app.py
          - DBEndpoint:
              Fn::ImportValue: !Sub ${EnvironmentName}-DBEndpointURL
          
      InstanceType: t3.micro
      ImageId: !Ref AMItoUse
      KeyName: !Ref KeyToUse
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '20'
      SecurityGroupIds:
      - Fn::ImportValue: !Sub "${EnvironmentName}-AppServerSecurityGroupID"
      

Outputs: 

    AppServerPublicURL:
        Description: The public url to elastic cache application
        Value: !Join [ "", [ "http://", !GetAtt ServerInstance.PublicDnsName ]]
        Export:
          Name: !Sub ${EnvironmentName}-PUB-URL